# Generated by Django 3.2.12 on 2022-09-21 02:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('exp', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='경험치')),
                ('point', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='포인트')),
                ('profile_img', models.TextField(null=True, verbose_name='프로필 사진')),
                ('is_editor', models.BooleanField(default=False, verbose_name='에디터 여부')),
                ('is_private', models.BooleanField(default=False, verbose_name='나의 정원 공개 설정')),
                ('plants_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='반려식물 개수')),
                ('followers_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='팔로워 수')),
                ('follows_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='팔로우 수')),
                ('articles_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='내가 쓴 글 수')),
                ('comments_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='내가 쓴 댓글 수')),
                ('likes_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='좋아요한 글 수')),
                ('date_of_birth', models.DateField(verbose_name='생년월일')),
                ('age_group', models.CharField(max_length=10, verbose_name='연령대')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('level_code', models.IntegerField(primary_key=True, serialize=False, verbose_name='등급코드')),
                ('threshold', models.IntegerField(verbose_name='기준')),
                ('level_name', models.CharField(max_length=10, verbose_name='등급명')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='팔로우한 시각')),
                ('follow_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_users', to=settings.AUTH_USER_MODEL, verbose_name='내 아이디')),
                ('following_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_users', to=settings.AUTH_USER_MODEL, verbose_name='팔로우한 유저 아이디')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='followings',
            field=models.ManyToManyField(related_name='followers', through='accounts.Follow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
